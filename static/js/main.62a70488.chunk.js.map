{"version":3,"sources":["components/images/header-logo.png","components/header.js","components/RenderCards.js","components/cardsLogic.js","components/images/loading.png","components/GameLogic.js","App.js","index.js"],"names":["Header","props","className","currentScore","bestScore","src","logo","alt","onClick","document","querySelector","style","display","RenderCard","charName","imgSource","cardId","selected","handleClick","id","CardsLogic","cardsNo","currentLevel","useEffect","loadingImg","startOver","tempCards","length","setCards","fetch","number","Math","floor","random","randomCharacterNumber","then","result","json","newCard","name","image","setTempCards","error","alert","GameLogic","useState","cards","level","setLevel","setStartOver","e","currentId","target","parentElement","isNaN","parseInt","setCurrentScore","newCards","array","j","x","i","shuffle","swiftId","selectedCards","map","card","checkWinCondition","lodingImg","elem","App","setBestScore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62a70488.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header-logo.8841bd1b.png\";","import logo from \"./images/header-logo.png\"\r\n\r\n\r\nfunction Header(props) {\r\n    function showHelpCard() {\r\n        document.querySelector(\".helpWrapper\").style.display = \"flex\";\r\n    }\r\n    return (\r\n        <section className=\"headerSection\">\r\n            <div className=\"scoreboardWrapper\">\r\n                <h2>Current score: {props.currentScore}</h2>\r\n                <h2>Best score: {props.bestScore}</h2>\r\n            </div>\r\n            <div className=\"headerLogoWrapper\">\r\n                <img src={logo} alt=\"logo\" className=\"headerLogo\"></img>\r\n            </div>\r\n            <div className=\"gameInfo\" onClick={showHelpCard}><p>?</p></div>\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n \r\nfunction RenderCard(props) {\r\n    const {charName, imgSource, cardId, selected, handleClick} = props;\r\n    return (\r\n        <div className=\"card\"  data-selected={selected} id={cardId} onClick={handleClick}>\r\n            <img src={imgSource} alt=\"card\"></img>\r\n            <p>{charName}</p>\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default RenderCard","import {useEffect} from 'react'\r\n\r\n\r\nfunction CardsLogic(props) {\r\n\r\n    const randomCharacterNumber = () => {\r\n         //return a random number between 1 and 826\r\n         //as our api currently has 826 possible characters\r\n        let number = Math.floor(Math.random() * 826)\r\n        if(number < 1) {\r\n            return number + 1\r\n        }\r\n        return number\r\n     }\r\n\r\n    \r\n    //no of cards per row, to be multiplied by the level no, for eg for for level one we have 4 cards, \r\n    //1*4, for level two we have 8 cards, 2*4\r\n    const cardsNo = props.currentLevel * 4 ; \r\n    useEffect(() => {\r\n        let loadingImg = document.querySelector(\".loadingImg\");\r\n        \r\n        if(props.startOver === false) {\r\n            loadingImg.style.display = \"block\";\r\n        } else {\r\n\r\n            if(cardsNo === props.tempCards.length){\r\n                //we fetch new cards until the level requirement is met \r\n                loadingImg.style.display = \"none\";\r\n                props.setCards(props.tempCards)\r\n                \r\n\r\n            } else {\r\n                loadingImg.style.display = \"block\";\r\n\r\n                fetch(\"https://rickandmortyapi.com/api/character/\"+randomCharacterNumber())\r\n                .then(result => result.json())\r\n                .then(\r\n                    (result) => {\r\n                        let selected = false;\r\n                        let newCard = [result.name, result.image, props.tempCards.length, selected]\r\n                        props.setTempCards([...props.tempCards, newCard])\r\n                        \r\n                    },\r\n                    (error) => {\r\n                        alert(\"Error loading API, press OK to try again\")\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }, [props.tempCards, cardsNo, props.startOver])\r\n    return (\r\n        null\r\n    )\r\n}\r\n\r\nexport default CardsLogic \r\n","export default __webpack_public_path__ + \"static/media/loading.a6785a18.png\";","import React, {useState} from 'react'\r\nimport RenderCard from './RenderCards'\r\nimport CardsLogic from './cardsLogic'\r\nimport lodingImg from \"./images/loading.png\"\r\n\r\n\r\nfunction GameLogic(props){\r\n\r\n    const [cards, setCards] = useState([]);\r\n    const [tempCards, setTempCards] = useState([]);\r\n    const [level, setLevel] = useState(props.level)\r\n    const [startOver, setStartOver] = useState(true)\r\n     \r\n    function handleClick(e){\r\n        let currentId = e.target.parentElement.id\r\n    \r\n        if(isNaN(parseInt(currentId))) {\r\n            currentId = e.target.id\r\n            //when clicking a card the user might click between the card description\r\n            //and the card image, and select the div directly, in this case we have no\r\n            //card paren Id to return and the app would crash, so we assign the id \r\n            //from the card directly, not the parents id as in case of child components\r\n         }  \r\n\r\n        if(cards[currentId][3] === true) {\r\n            //game lost, as same card was selected twice\r\n            showGameOver()\r\n            setCards([])\r\n            setTempCards([])\r\n            setLevel(1)\r\n            props.setCurrentScore(0)  \r\n        } else {\r\n            cards[currentId][3] =true;\r\n            props.setCurrentScore(props.currentScore + 1);\r\n            \r\n            let newCards = shuffle([...cards]);\r\n            swiftId(newCards);\r\n            setCards(newCards);\r\n            if(checkWinCondition(cards) === true) {\r\n                setCards([])\r\n                setTempCards([])\r\n                setLevel(level+1)\r\n                \r\n            }\r\n        }\r\n      } \r\n    //console.log(cards)\r\n    return (\r\n        <div className=\"mainContent\">\r\n             <div className=\"loadingContainer\">\r\n                <img src={lodingImg} alt=\"loading\" className=\"loadingImg\"></img>   \r\n            </div>\r\n            <div className=\"helpWrapper\" >\r\n                <div className='helpCard'>\r\n                    <h3 onClick={hideHelpCard}>x</h3>\r\n                    <h2>how to play</h2>\r\n                    <p>The game goal is to select a card, remember its character and not select it again during the same round.</p>\r\n                    <p>Once each card is selected once we advance to the next round, with each additional level\r\n                        we have 4 extra cards to chose from.  </p>\r\n                    <p>The game ends once the same card is selected twice in the same round</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"gameOverWrap\"  >\r\n                <div onClick={hideGameOver}>\r\n                    <h2>Game over</h2>\r\n                    <p>Click here to start over</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"cardsWrapper\">     \r\n                {cards.map((elem) => {\r\n                  return <RenderCard \r\n                    key={elem[2]}\r\n                    charName={elem[0]} \r\n                    imgSource={elem[1]} \r\n                    cardId={elem[2]} \r\n                    selected={elem[3]}\r\n                    handleClick={(e) => handleClick(e)} \r\n                  /> \r\n                })}\r\n            </div>\r\n            <CardsLogic \r\n                startOver={startOver}\r\n                setCards={setCards} \r\n                currentLevel={level}\r\n                tempCards={tempCards}\r\n                setTempCards={setTempCards}\r\n            />\r\n        </div>\r\n    )\r\n    function hideHelpCard() {\r\n        document.querySelector(\".helpWrapper\").style.display = \"none\";\r\n    }\r\n    function showGameOver() {\r\n        setStartOver(false)\r\n        document.querySelector(\".gameOverWrap\").style.display = \"flex\";\r\n    }\r\n    function hideGameOver(){\r\n        setStartOver(true)\r\n        document.querySelector(\".gameOverWrap\").style.display = \"none\";\r\n    }\r\n}\r\n\r\n \r\nfunction checkWinCondition(cards){\r\n    let selectedCards = [];\r\n    cards.map(function(card){\r\n\r\n        if(card[3] === true){\r\n            selectedCards = [...selectedCards, card]\r\n        }\r\n\r\n        //added return just to avoid the console warning\r\n        return null \r\n    })\r\n    \r\n    if(cards.length === selectedCards.length) {\r\n        return true        \r\n    }   else {\r\n        return false\r\n    }\r\n \r\n}\r\n \r\n//https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\r\nfunction shuffle(array) {\r\n    let j, x, i;\r\n    for (i = array.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = array[i];\r\n        array[i] = array[j];\r\n        array[j] = x;\r\n    };\r\n    //console.log(array)\r\n    return array\r\n}\r\n \r\nfunction swiftId(array){\r\n    //after the elements are swifted, their ID remains the same, when clicking the element we obtain the parentsId, and after shuffling the cards\r\n    //the ID no longe\r\n    for(let i = 0; i < array.length; i++){\r\n        array[i][2] = i;\r\n     }\r\n    return array\r\n}\r\n\r\n\r\nexport default GameLogic","import './App.css';\nimport Header from './components/header'\nimport React, {useState, useEffect} from 'react'\nimport GameLogic from './components/GameLogic'\n\nfunction App() {\n   \n  const [level, setLevel] = useState(1)\n  const [currentScore, setCurrentScore] = useState(0)\n  const [bestScore, setBestScore] = useState(0)\n \n  \n \n  //as the state setter is async, we are awaiting the currentScore to be fully assigned(via the gameLogic component)before we assign a bestScore value\n  useEffect(() => {\n    if(currentScore > bestScore) {\n      setBestScore(currentScore)\n \n    }\n  }, [currentScore, bestScore])\n\n\n  return (\n    <div className=\"App\">\n      <Header \n        currentScore={currentScore} \n        bestScore={bestScore}\n      />\n      <GameLogic \n        level={level}\n        setLevel={setLevel}\n        currentScore={currentScore}\n        setCurrentScore={setCurrentScore}\n      />\n\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n "],"sourceRoot":""}